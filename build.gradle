/*
 *  This file is part of MonikaBot.
 *
 *  Copyright (C) 2018 Derppening <david.18.19.21@gmail.com>
 *
 *  MonikaBot is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  MonikaBot is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with MonikaBot.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

plugins {
    id 'application'
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.2.70'
}

group 'com.derppening'
version '1.2.0-beta.11'

mainClassName = "com.derppening.monikabot.Main"
applicationDefaultJvmArgs = ["-XX:+UseG1GC", "-Xms128M", "-Xmx1G"]

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    def kotlin_version = '1.2.+'
    def kotlinx_coroutines_version = '0.26.+'
    def discord4j_version = '2.10.+'
    def logback_version = '1.2.+'
    def jackson_core_version = '2.9.+'
    def jackson_databind_version = '2.9.+'
    def jackson_annotations_version = '2.9.+'
    def jackson_module_kotlin_version = '2.9.+'
    def jackson_datatype_jsr310_version = '2.9.+'
    def jsoup_version = '1.11.+'
    def junit_version = '5.3.+'
    def junit_platform_version = '1.3.+'
    def apache_commons_text_version = '1.4'

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "com.discord4j:Discord4J:$discord4j_version"
    compile "ch.qos.logback:logback-classic:$logback_version"
    compile "com.fasterxml.jackson.core:jackson-core:$jackson_core_version"
    compile "com.fasterxml.jackson.core:jackson-databind:$jackson_databind_version"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_annotations_version"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_module_kotlin_version"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_datatype_jsr310_version"
    compile "org.jsoup:jsoup:$jsoup_version"
    compile "org.apache.commons:commons-text:$apache_commons_text_version"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"

    testCompile "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version"
    testCompile "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testCompile "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testCompile "org.junit.platform:junit-platform-runner:$junit_platform_version"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    testRuntime "org.junit.platform:junit-platform-console:$junit_platform_version"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

def getWorkingBranch() {
    def gitBranch = "unknown"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute((List)null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
        e.printStackTrace()
    }
    return gitBranch
}

task createGradleProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/properties/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p['gitbranch'] = getWorkingBranch()
            p.store w, null
        }
    }
}

classes {
    dependsOn createGradleProperties
}

test {
    useJUnitPlatform()
}

wrapper {
    gradleVersion = "4.10.2"
    distributionType = Wrapper.DistributionType.ALL
}