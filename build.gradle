buildscript {
    ext.kotlin_version = '1.2.30'
    ext.discord4j_version = '2.9.3'
    ext.logback_version = '1.2.3'
    ext.gson_version = '2.8.2'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

setGroup("hk.derppening.monikabot")
setVersion("1.0.1")

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'kotlin'

mainClassName = "MainKt"
applicationDefaultJvmArgs = ["-Xmx1G", "-XX:+UseG1GC"]

sourceCompatibility = 1.8

repositories {
    mavenCentral()

    jcenter()
    maven {
        setUrl("https://jitpack.io")
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "com.github.austinv11:Discord4J:$discord4j_version"
    compile "ch.qos.logback:logback-classic:$logback_version"
    compile "com.google.code.gson:gson:$gson_version"

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

def getWorkingBranch() {
    def gitBranch = "unknown"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {}
    return gitBranch
}

task createKtProperties() {
    doLast {
        new File("$projectDir/out/production/classes/properties/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p['gitbranch'] = getWorkingBranch()
            p.store w, null
        }
    }
}

task createGradleProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/properties/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p['gitbranch'] = getWorkingBranch()
            p.store w, null
        }
    }
}

classes {
    dependsOn createGradleProperties
}